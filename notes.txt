SideCar Container Pattern
* Sidecar
* Ambassador : This proxy network traffic service from once container to another
* Adapter : Transform the main containers output

SideCar container
Init Container

---
** Need to check

pods restart policy
Adhoc command in kubectl
Check Image status
---
kubectl rollout undo


CustomResourceDefinition
ServiceAccount 
    Admission controller
    ServiceAccount Token
    Role
Admission control
---
volume
volumeMount
persistance volume
persistance volume Claim
Directory
DirectoryOrCreate
File
FileOrCreate

kubectl edit service
kubectl top 

----------

Nodes: Worker machine
    Minions
Cluster is multiple node put together
Master: 
Service Installed
    API server          : FE for K8s service
    ETCD                : Key Value Store
    kubelet             : Agent on each node
    Container Runtime   : Run Container
    controller          : Brain behind orchastration
    Scheduler           : Distributing Work load

Master:
    Container Runtime
    API server
    ETCD
    Scheduler
    Controller
Worker:
    Container Runtime
    kubelet

--------------

CRI : Container runtime interface
OCI: Open Container Initiative
    ImageSpec   : How image should be build
    Runtimespec : How the run time spec
    Dockershim
ContainerD
    part of CNCF
    cli is ctr
    Ctr has limited feature only
    alternate cli is nerdCli as ctr it's not user friendly
    crictl is to used for k8s

-----
kubectl commands
Run the POD
kubectl run nginx --image nginx
kubectl get pods
kubectl delete pod nginx
-----
Pod Status:
  Pending
  Succeeded
  ContainerCreating
  Running
  ErrImagePull
  Failed
  Unknown
  ImagePullBackOff
  CrashLoopBackoff
Pod state:
  Waiting
  Running
  Terminated
  OOMKilled

kubectl run redis --image-redis --dry-run=client -o yaml
kubectl edit pod <pod-name>
kubectl explain rs
kubectl expose pod
kubectl replace

kubectl create serviceaccount <service-name>
kubectl get serviceaccount
kubectl create token <service-name>

Need to revisit the token section
Need to revisit the ServiceAccount

----
taints are applied to node
toleration are applied to pod
K8s set taint on master node by default, allowing no jobs to be scheduled on the master node\
----

Scheduler decide which node the pod should go to.
OOM Memory kill


kubectl label node <node-name>
kubectl taint node <node-name>


https://github.com/lucassha/CKAD-resources
https://github.com/mmumshad/kubernetes-the-hard-way
https://training.linuxfoundation.org/certification/certified-kubernetes-application-developer-ckad/

Pod Lifecycle
  Pending - Scheduler identify where to put the pod
  ContainerCreating: Pulling image and creating Container
  Running: Container is running


kubectl top node
kubectl top pod


PodScheduled
initialized
ContainersReady
Ready


Rolling update is default deployment strategy
kubectl set image <deployment> <container-name>
kubectl create -f <file-name> --record
kubectl rollout undo <deployment>
kubectl rollout status <deployment>
kubectl rollout history <deployment>
kubectl rollout undo <deployment>
Deployment strategy
    Recreate
    Rolling Update